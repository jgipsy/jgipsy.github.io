<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[jgipsy]]></title><description><![CDATA[jgipsy]]></description><link>https://jgipsy.github.io</link><generator>RSS for Node</generator><lastBuildDate>Sun, 19 Mar 2017 07:16:20 GMT</lastBuildDate><atom:link href="https://jgipsy.github.io/feed.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[Liferay ALM]]></title><description><![CDATA[<p><em>Under construction</em></p>
<ul>
<li>
<p>Distribución normal</p>
<pre><code>    Casi todo en la naturaleza cumple una distribución normal. Esto que significa? Que 95% de cualquier población no está a más de 2 veces la desviació estandard de la media. Solo el 5% queda fuera de este rando. Un ejemplo, si la población a analizar son los trabajadores de OT, el 95% de los trabajadores tendrán unos skills normales. Solo el 2,5% tendrán skills superiores y por desgracia, otro 2,5% tendrán skills inferiores. Para vuestra tranquilidad ya os digo que al haber asistido a esta openTalk ya estáis demostrando no estar en ese 2,5% inferior (y seguramente tampoco en el 2,5% superior!)

    ¿Con esto que os quiero decir? Pues que los que os voy a enseñar es una solución normal, implementado con aplicaciones normales, para que ayudar a informáticos normales con el fin de poder realizar soluciones excelentes ;)
</code></pre>
</li>
<li>
<p>El proyecto</p>
<pre><code>    El caso que nos atañe (el problema) es la creación de un portal (algo normal) para un importante cliente que tenia la necesidad de gestionar una comunidad de voluntarios de forma telemática. CRM, CMS, esa delgada línea entre un tipo de producto u otro. Aquí la solución (o problema) que se tomó para implementar este portal fue recurrir al tan manido a la par que querido Liferay. En su versión 6.2EE (no recuerdo que SP, creo que el 15). Hasta aquí todo bien. Entonces fue cuando empezamos a complicarnos un poco la vida. Para darle un toque diferenciador (que para eso estamos en OT) y siguiendo las tendencias actuales (no se si tecnologicas o marketinianas, o quizás sendas cosas) se decidió añadir una pizca de Angular a la receta. Pero como suele pasar con la sal, se nos fue la mano con el salero. Ah, se me olvidaba. No contentos de añadir Angular, tiramos la casa por la ventana, y decidimos desplegar el Liferay en la plataforma Cloud de este importante cliente. Comento para decir que en dicho PAAS (implantado por OT) ya hay más de 20 Liferays corriendo (de un total de 212 aps, aproximadamente el 10%).
</code></pre>
</li>
<li>
<p>La organización del proyecto</p>
<pre><code>    Organización del proyecto. Se decidió usar dos equipos de trabajo para afrontar este proyecto. Un equipo backend con especialistas Liferay. Y un equipo de Backend con especialistas Angular. Y alguien que metiese un poco de pegamento (yo). 
    Dos equipos de trabajo completamente independientes. Tan independientes que cada uno tenia su repositorio SVN:

    Backend, un repositorio con la estructura necesaria del Liferay con sus respectivos portlets que mas adelante os detallaré.
    Frontend, un respositorio con la estructura necesaria para implementar multiples modulos angular (uno por cada portlet angular).

    Este tipo de organización, dado que hay un contrato que cumplir entre las dos partes, es casi imposible independizarlo completamente. Basicamente es imposible, por timings del proyecto. Al estar en fase de desarrollo el backend (liferay) la madurez de su api no se alcanza hasta fases tardias. Esto implica que, para que fuese rodado, el frontend (desarrollo angular) tendría que realiarlse después del desarrollo del liferay. 

    Este tipo de organización es muy parecida a la organización que se utiliza en el desarrollo de una app movil. Se pacta la api entre middleware y app al principio del desarrollo y luego se va haciendo. El error que se cometió en este proyecto, es que la gente de angular trabajaba contra un mock del servicio en lugar de contra el entorno de dev. Y por tanto, ellos daban siempre por finalizado el trabajo antes de que realmente estuviese finalizado (pues la api real tenia diferencias siempre con el mock).
</code></pre>
</li>
<li>
<p>Stack Backend</p>
<pre><code>    SCM - SVN
    Codigo - Liferay mavenizado. pom padre con dependencias y configuraciones comunes y un pom hijo por cada portlet. 
    Construcción - 
        mvn liferay:build-services
        mvn liferay:build-theme
        mvn deploy
    Entorno DEV: Tomcat / Jdk6 / mySQL XX
</code></pre>
</li>
<li>
<p>Stack Frontend</p>
<pre><code>    SCM - SVN
    Codigo - AngularJS. Bower como gestor de dependencias, gulp como herramienta de construcción. Compass para CSS (necesidad de instalar rubi como compilador de compass).
    Entorno DEV: Apache / PHP / Mockup
</code></pre>
</li>
<li>
<p>Reglas del juego</p>
<pre><code>    El contrato de backend va a misa. Documentación en redmine. 
    Backend Liferay se comporta como una API REST para frontEnd.
    El trabajo de frontend no finaliza en el Mockup. Finaliza en el Liferay de DEV. [NECESIDAD QUE EL ENTORNO DE MOCKUP ESTÉ CONECTADO A ENTORNO DEV LIFERAY]
    El portlet no se me ve. ¿De quien es la culpa? Lo revisan conjuntamente los desarrolladores del portlet Liferay y del module Angular.
</code></pre>
</li>
<li>
<p>Construcción compartida</p>
<pre><code>    * Construir Frontend con Gulp -> Salida: main.js por portlet / Assets, css y js para tema Liferay 
    * Copiar js, css y assets generados en la construcción del frontend en cada uno de los portlets y tema (en tiempo de construcción)
    * Construir portlets y tema liferay con maven 
    * Cada unos de los wars generados en la construcción de liferay copiarlos el carpeta deploy del tomcat del liferay de DEV
    * Generación diaria de snapshot de la BBDD del liferay y del content fs de liferay (esto nos servia para poder tener entornos locales totalmente funcionales)
</code></pre>
</li>
<li>
<p>Ciclo de vida DEV</p>
<pre><code>    Cada noche se generaba versión SNAPSHOT y se instalaba en DEV
    Bajo demanda, si se tenía que realizar versión para QA, se generaba RELEASE y se desplegaba en entorno de QA (Clonico de entorno de DEV). El fs y la BBDD se copiaban a mano (documentado)
    Subir código release validada por QA en SCM cliente. Ejecutar Hudson cliente para construcción y validación reglas calidad en Sonar.
    Copian este código a SVN Cloud y alli se construye la versión para PRE. Se instala a petición a través de herramienta construcción visual.
</code></pre>
</li>
<li>
<p><em>Ciclo de vida PRO</em></p>
<pre><code>    SCM - SVN
    Hook post-commit en SVN que invoca la ejecución de un Job Jenkins Parametrizado
    Jenkins Corporativo (Build server)
    Job parametrizados. Parametros de entrada para diferenciar la tecnología y la aplicación e identificar equipo de trabajo (para notificaciones).
        Capaz de construir aplicaciones mavenizadas. Tanto PHP com Java. Maven dominando el mundo.
        Ejecutar reglas de calidad con perfiles de calidad personalizados por stack tecnologico.
        Construcción, ejecución de test unitarios.
        Almacenamiento del binario construido en Nexus Corporativo
    IDECLD (Herramienta de autorización y despliegue)
        Aplicación - Version - Tecnologia - Segmento - Equipo de trabajo - Responsable
        Despliegue a PRE - Job Jenkins despliegue a Cloud
        Aceptación versión PRE - Generación de release (Job parametrizado Jenkins)
        Despliegue en PRO - Job Jenkins despliegue a Cloud
        Acceso a BBDD temporal securizado (one-time-token)
        Consulta de logs
        Historico del ciclo de vida de la app
        Acceso al FS temporal securizado (one-time-token)
    
</code></pre>
</li>
<li>
<p>Para los frikis de Liferay</p>
<pre><code>    Detalle portlet angular
</code></pre>
</li>
<li>
<p>Para los frikis de Angular</p>
<pre><code>    NS/NR
</code></pre>
</li>
<li>
<p>Para los frikis de ALM</p>
<pre><code>    Gulp
    Bower
    Rvm
    Maven
    PAAS
</code></pre>
</li>
<li>
<p>Para los frikis de Cloud</p>
<pre><code>    vmc push / update
    buildpack
    variables de entorno JSON con datos conexión a servicio BBDD
    Cloudfoundry v1
</code></pre>
</li>
</ul>
]]></description><link>https://jgipsy.github.io/posts/liferay-alm/</link><guid isPermaLink="true">https://jgipsy.github.io/posts/liferay-alm/</guid><pubDate>Thu, 01 Mar 2018 00:00:00 GMT</pubDate></item><item><title><![CDATA[Redis high availavility installation]]></title><description><![CDATA[<p>Cookbook to install redis in high availability in master-slave tipology</p>
<h1 id="install-redis-in-a-host-app_server_1_ip"><a href="#install-redis-in-a-host-app_server_1_ip" class="phenomic-HeadingAnchor">#</a>Install redis in a host &#x3C;APP_SERVER_1_IP></h1>
<pre><code class="hljs language-shell">wget http:<span class="hljs-comment">//download.redis.io/releases/redis-3.2.8.tar.gz</span>
tar xzf redis-3.2.8.tar.gz
<span class="hljs-keyword">cd</span> redis-3.2.8/
make
<span class="hljs-keyword">cd</span> utils
sudo ./install_server.<span class="hljs-keyword">sh</span></code></pre>
<h1 id="fill-form"><a href="#fill-form" class="phenomic-HeadingAnchor">#</a>Fill form</h1>
<pre><code class="hljs language-shell"><span class="hljs-string">Port           :</span> <span class="hljs-number">6379</span>
Config <span class="hljs-string">file    :</span> <span class="hljs-regexp">/etc/</span>redis/redis_6379.conf
Log <span class="hljs-string">file       :</span> <span class="hljs-regexp">/var/</span>log/redis_6379.log
Data <span class="hljs-string">dir       :</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/redis/</span><span class="hljs-number">6379</span>
<span class="hljs-string">Executable     :</span> <span class="hljs-regexp">/home/</span>vagrant<span class="hljs-regexp">/redis-3.2.8/</span>src/redis-server
Cli <span class="hljs-string">Executable :</span> <span class="hljs-regexp">/home/</span>vagrant<span class="hljs-regexp">/redis-3.2.8/</span>src/redis-clii</code></pre>
<h1 id="configure-redis_6379conf-with-next-configuration"><a href="#configure-redis_6379conf-with-next-configuration" class="phenomic-HeadingAnchor">#</a>Configure redis_6379.conf with next configuration</h1>
<pre><code class="hljs language-shell">bind &#x3C;APP_SERVER_1_IP> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>
port <span class="hljs-number">6379</span>
slave-priority <span class="hljs-number">1</span></code></pre>
<h1 id="create-sentinelconf-file"><a href="#create-sentinelconf-file" class="phenomic-HeadingAnchor">#</a>Create sentinel.conf file</h1>
<pre><code class="hljs language-shell">bind &#x3C;APP_SERVER_1_IP>
sentinel<span class="hljs-built_in"> monitor </span>redismaster &#x3C;APP_SERVER_1_IP> 6379 2  
sentinel down-after-milliseconds redismaster 6000 
daemonize yes
loglevel verbose
logfile <span class="hljs-string">"/var/log/sentinel.log"</span>
pidfile <span class="hljs-string">"/var/run/redis_26379.pid"</span></code></pre>
<h1 id="start-sentinel"><a href="#start-sentinel" class="phenomic-HeadingAnchor">#</a>Start sentinel</h1>
<pre><code class="hljs language-shell">sudo ./install_server<span class="hljs-selector-class">.sh</span>
<span class="hljs-comment">/*nohup ./redis-server /home/vagrant/redis-3.2.8/utils/sentinel.conf --sentinel &#x26;*/</span></code></pre>
<h1 id="change-etcinitdredis_26379"><a href="#change-etcinitdredis_26379" class="phenomic-HeadingAnchor">#</a>Change /etc/init.d/redis_26379</h1>
<pre><code class="hljs language-shell"><span class="hljs-meta">#!/bin/sh</span>
<span class="hljs-comment">#Configurations injected by install_server below....</span>

EXEC=/home/vagrant/redis-3.2.8/src/redis-server
CLIEXEC=/home/vagrant/redis-3.2.8/src/redis-cli
PIDFILE=/var/run/redis_26379.pid
CONF=<span class="hljs-string">"/etc/redis/sentinel.conf"</span>
REDISPORT=<span class="hljs-string">"26379"</span>
LOGFILE=<span class="hljs-string">"/var/log/sentinel.log"</span>
<span class="hljs-comment">###############</span>
<span class="hljs-comment"># SysV Init Information</span>
<span class="hljs-comment"># chkconfig: - 58 74</span>
<span class="hljs-comment"># description: redis_26379 is the redis daemon.</span>
<span class="hljs-comment">### BEGIN INIT INFO</span>
<span class="hljs-comment"># Provides: redis_26379</span>
<span class="hljs-comment"># Required-Start: $network $local_fs $remote_fs</span>
<span class="hljs-comment"># Required-Stop: $network $local_fs $remote_fs</span>
<span class="hljs-comment"># Default-Start: 2 3 4 5</span>
<span class="hljs-comment"># Default-Stop: 0 1 6</span>
<span class="hljs-comment"># Should-Start: $syslog $named</span>
<span class="hljs-comment"># Should-Stop: $syslog $named</span>
<span class="hljs-comment"># Short-Description: start and stop redis_26379</span>
<span class="hljs-comment"># Description: Redis daemon</span>
<span class="hljs-comment">### END INIT INFO</span>


<span class="hljs-keyword">case</span> <span class="hljs-string">"<span class="hljs-variable">$1</span>"</span> <span class="hljs-keyword">in</span>
    start)
        <span class="hljs-keyword">if</span> [ <span class="hljs-_">-f</span> <span class="hljs-variable">$PIDFILE</span> ]
        <span class="hljs-keyword">then</span>
            <span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$PIDFILE</span> exists, process is already running or crashed"</span>
        <span class="hljs-keyword">else</span>
            <span class="hljs-built_in">echo</span> <span class="hljs-string">"Starting Redis server..."</span>
            <span class="hljs-variable">$EXEC</span> <span class="hljs-variable">$CONF</span> --sentinel
        <span class="hljs-keyword">fi</span>
        ;;
    stop)
        <span class="hljs-keyword">if</span> [ ! <span class="hljs-_">-f</span> <span class="hljs-variable">$PIDFILE</span> ]
        <span class="hljs-keyword">then</span>
            <span class="hljs-built_in">echo</span> <span class="hljs-string">"<span class="hljs-variable">$PIDFILE</span> does not exist, process is not running"</span>
        <span class="hljs-keyword">else</span>
            PID=$(cat <span class="hljs-variable">$PIDFILE</span>)
            <span class="hljs-built_in">echo</span> <span class="hljs-string">"Stopping ..."</span>
            <span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$PID</span>
            rm <span class="hljs-variable">$PIDFILE</span>
            <span class="hljs-keyword">while</span> [ -x /proc/<span class="hljs-variable">${PID}</span> ]
            <span class="hljs-keyword">do</span>
                <span class="hljs-built_in">echo</span> <span class="hljs-string">"Waiting for Redis to shutdown ..."</span>
                sleep 1
            <span class="hljs-keyword">done</span>
            <span class="hljs-built_in">echo</span> <span class="hljs-string">"Redis stopped"</span>
        <span class="hljs-keyword">fi</span>
        ;;
    status)
        PID=$(cat <span class="hljs-variable">$PIDFILE</span>)
        <span class="hljs-keyword">if</span> [ ! -x /proc/<span class="hljs-variable">${PID}</span> ]
        <span class="hljs-keyword">then</span>
            <span class="hljs-built_in">echo</span> <span class="hljs-string">'Redis is not running'</span>
        <span class="hljs-keyword">else</span>
            <span class="hljs-built_in">echo</span> <span class="hljs-string">"Redis is running (<span class="hljs-variable">$PID</span>)"</span>
        <span class="hljs-keyword">fi</span>
        ;;
    restart)
        <span class="hljs-variable">$0</span> stop
        <span class="hljs-variable">$0</span> start
        ;;
    *)
        <span class="hljs-built_in">echo</span> <span class="hljs-string">"Please use start, stop, restart or status as first argument"</span>
        ;;
<span class="hljs-keyword">esac</span></code></pre>
<h1 id="install-redis-in-another-host-app_server_2_ip"><a href="#install-redis-in-another-host-app_server_2_ip" class="phenomic-HeadingAnchor">#</a>Install redis in another host &#x3C;APP_SERVER_2_IP></h1>
<pre><code class="hljs language-shell">wget http:<span class="hljs-comment">//download.redis.io/releases/redis-3.2.8.tar.gz</span>
tar xzf redis-3.2.8.tar.gz
<span class="hljs-keyword">cd</span> redis-3.2.8/
make
<span class="hljs-keyword">cd</span> utils
sudo ./install_server.<span class="hljs-keyword">sh</span></code></pre>
<h1 id="fill-form-1"><a href="#fill-form-1" class="phenomic-HeadingAnchor">#</a>Fill form</h1>
<pre><code class="hljs language-shell"><span class="hljs-string">Port           :</span> <span class="hljs-number">6379</span>
Config <span class="hljs-string">file    :</span> <span class="hljs-regexp">/etc/</span>redis/<span class="hljs-number">6379.</span>conf
Log <span class="hljs-string">file       :</span> <span class="hljs-regexp">/var/</span>log/redis_6379.log
Data <span class="hljs-string">dir       :</span> <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/redis/</span><span class="hljs-number">6379</span>
<span class="hljs-string">Executable     :</span> <span class="hljs-regexp">/home/</span>vagrant<span class="hljs-regexp">/redis-3.2.8/</span>src/redis-server
Cli <span class="hljs-string">Executable :</span> <span class="hljs-regexp">/home/</span>vagrant<span class="hljs-regexp">/redis-3.2.8/</span>src/redis-cli</code></pre>
<h1 id="configure-redis_6379conf-with-next-configuration-1"><a href="#configure-redis_6379conf-with-next-configuration-1" class="phenomic-HeadingAnchor">#</a>Configure redis_6379.conf with next configuration</h1>
<pre><code class="hljs language-shell">bind &#x3C;APP_SERVER_2_IP>
port <span class="hljs-number">6379</span>
slave-priority <span class="hljs-number">10</span>
slaveof &#x3C;APP_SERVER_1_IP> <span class="hljs-number">6379</span></code></pre>
<h1 id="create-sentinelconf-file-1"><a href="#create-sentinelconf-file-1" class="phenomic-HeadingAnchor">#</a>Create sentinel.conf file</h1>
<pre><code class="hljs language-shell">bind &#x3C;APP_SERVER_2_IP>
sentinel<span class="hljs-built_in"> monitor </span>redismaster &#x3C;APP_SERVER_2_IP> 6379 2  
sentinel down-after-milliseconds redismaster 6000</code></pre>
<h1 id="start-sentinel-1"><a href="#start-sentinel-1" class="phenomic-HeadingAnchor">#</a>Start sentinel</h1>
<pre><code class="hljs language-shell">sudo ./install_server<span class="hljs-selector-class">.sh</span>
<span class="hljs-comment">/*nohup ./redis-server /etc/redis/sentinel.conf --sentinel &#x26;*/</span></code></pre>
<h1 id="install-sentinel-in-a-host-app_server_3_ip"><a href="#install-sentinel-in-a-host-app_server_3_ip" class="phenomic-HeadingAnchor">#</a>Install sentinel in a host &#x3C;APP_SERVER_3_IP></h1>
<pre><code class="hljs language-shell">wget http:<span class="hljs-comment">//download.redis.io/releases/redis-3.2.8.tar.gz</span>
tar xzf redis-3.2.8.tar.gz
<span class="hljs-keyword">cd</span> redis-3.2.8/
make
<span class="hljs-keyword">cd</span> utils
sudo ./install_server.<span class="hljs-keyword">sh</span></code></pre>
<h1 id="configure-sentinelconf"><a href="#configure-sentinelconf" class="phenomic-HeadingAnchor">#</a>Configure sentinel.conf</h1>
<pre><code class="hljs language-shell">bind &#x3C;APP_SERVER_3_IP>
sentinel<span class="hljs-built_in"> monitor </span>redismaster &#x3C;APP_SERVER_3_IP> 6379 2</code></pre>
<h1 id="start-sentinel-2"><a href="#start-sentinel-2" class="phenomic-HeadingAnchor">#</a>Start sentinel</h1>
<pre><code class="hljs language-shell">sudo ./install_server<span class="hljs-selector-class">.sh</span>
<span class="hljs-comment">/*nohup ./redis-server /home/vagrant/redis-3.2.8/sentinel.conf --sentinel &#x26;*/</span></code></pre>
<h1 id="knowed-bugs"><a href="#knowed-bugs" class="phenomic-HeadingAnchor">#</a>Knowed bugs</h1>
<h2 id="if-you-see-in-log"><a href="#if-you-see-in-log" class="phenomic-HeadingAnchor">#</a>If you see in log:</h2>
<pre><code class="hljs language-shell"><span class="hljs-number">7137</span>:S <span class="hljs-number">14</span> Mar <span class="hljs-number">08</span>:<span class="hljs-number">22</span>:<span class="hljs-number">14.347</span> * Retrying <span class="hljs-keyword">with</span> SYNC...
<span class="hljs-number">7137</span>:S <span class="hljs-number">14</span> Mar <span class="hljs-number">08</span>:<span class="hljs-number">22</span>:<span class="hljs-number">14.347</span> # MASTER aborted replication <span class="hljs-keyword">with</span> an <span class="hljs-literal">error</span>: ERR Can<span class="hljs-symbol">'t</span> SYNC <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> connected <span class="hljs-keyword">with</span> my master
<span class="hljs-number">7137</span>:S <span class="hljs-number">14</span> Mar <span class="hljs-number">08</span>:<span class="hljs-number">22</span>:<span class="hljs-number">15.348</span> * Connecting <span class="hljs-keyword">to</span> MASTER &#x3C;APP_SERVER_1_IP>:<span class="hljs-number">6379</span>
<span class="hljs-number">7137</span>:S <span class="hljs-number">14</span> Mar <span class="hljs-number">08</span>:<span class="hljs-number">22</span>:<span class="hljs-number">15.349</span> * MASTER &#x3C;-> SLAVE sync started
<span class="hljs-number">7137</span>:S <span class="hljs-number">14</span> Mar <span class="hljs-number">08</span>:<span class="hljs-number">22</span>:<span class="hljs-number">15.349</span> * Non blocking connect <span class="hljs-keyword">for</span> SYNC fired the event.
<span class="hljs-number">7137</span>:S <span class="hljs-number">14</span> Mar <span class="hljs-number">08</span>:<span class="hljs-number">22</span>:<span class="hljs-number">15.350</span> * Master replied <span class="hljs-keyword">to</span> PING, replication can continue...
<span class="hljs-number">7137</span>:S <span class="hljs-number">14</span> Mar <span class="hljs-number">08</span>:<span class="hljs-number">22</span>:<span class="hljs-number">15.350</span> * Partial resynchronization <span class="hljs-keyword">not</span> possible (no cached master)
<span class="hljs-number">7137</span>:S <span class="hljs-number">14</span> Mar <span class="hljs-number">08</span>:<span class="hljs-number">22</span>:<span class="hljs-number">15.351</span> * Master does <span class="hljs-keyword">not</span> support PSYNC <span class="hljs-keyword">or</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> <span class="hljs-literal">error</span> state (reply: -ERR Can<span class="hljs-symbol">'t</span> SYNC <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> connected <span class="hljs-keyword">with</span> my master)</code></pre>
<p>You need to connect to redis-cli and execute this commands:</p>
<pre><code class="hljs language-shell">CONFIG <span class="hljs-keyword">SET</span> <span class="hljs-keyword">slave</span>-serve-stale-<span class="hljs-keyword">data</span> yes
SLAVEOF <span class="hljs-keyword">NO</span> ONE
CONFIG <span class="hljs-keyword">SET</span> <span class="hljs-keyword">slave</span>-serve-stale-<span class="hljs-keyword">data</span> <span class="hljs-keyword">no</span></code></pre>
<h1 id="cli-command-utils"><a href="#cli-command-utils" class="phenomic-HeadingAnchor">#</a>cli command utils</h1>
<pre><code class="hljs language-shell">/home/vagrant/redis-3.2.8/src/redis-cli

To see node role

INFO Replication

To see all stored data in <span class="hljs-keyword">cache</span>

<span class="hljs-keyword">KEYS</span> *

<span class="hljs-keyword">To</span> see all ordered <span class="hljs-keyword">keys</span> 

ZRANGE contactData~<span class="hljs-keyword">keys</span> <span class="hljs-number">0</span> <span class="hljs-number">-1</span> WITHSCORES

<span class="hljs-keyword">To</span> <span class="hljs-keyword">get</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">of</span> one <span class="hljs-keyword">key</span>

<span class="hljs-keyword">GET</span> <span class="hljs-string">"&#x3C;&#x3C;key>>"</span></code></pre>
<p>Reference: <a href="http://enmilocalfunciona.io/configuracion-basica-de-un-cluster-redis-sentinel-bajo-unix/">http://enmilocalfunciona.io/configuracion-basica-de-un-cluster-redis-sentinel-bajo-unix/</a></p>
]]></description><link>https://jgipsy.github.io/posts/redis-installation/</link><guid isPermaLink="true">https://jgipsy.github.io/posts/redis-installation/</guid><pubDate>Wed, 01 Mar 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[Git for dummies]]></title><description><![CDATA[<p>The basis of any computer project is the SCM. Without a good SCM it will be difficult to reach a good port.
So we want to show some first steps to work with GIT.</p>
<p>To start working with GIT, we recommend using an approach to the central repository philosophy (SVN style) against the philosophy of distributed repositories.</p>
<p>For this it is important to have Gitlab or Github as the central repository.</p>
<p>Starting from the topology that code repositories are embedded in a central server (either gitlab or github) a simple and intuitive way of working is as follows:</p>
<ul>
<li>Clone the master branch (or development) of the code repository</li>
</ul>
<pre><code class="hljs language-shell">git <span class="hljs-keyword">clone</span> <span class="hljs-title">&#x3C;URL_REPO</span>>.git</code></pre>
<ul>
<li>Create a branch in local code for the functionality to be developed. It is important to create a branch for each functionality.</li>
</ul>
<pre><code class="hljs language-shell">git branch <span class="hljs-built_in">feature</span>/&#x3C;<span class="hljs-built_in">feature</span>-name></code></pre>
<ul>
<li>
<p>Work comfortably</p>
</li>
<li>
<p>Before uploading, update the code in local with the master branch</p>
</li>
</ul>
<pre><code class="hljs language-shell">git pull origin <span class="hljs-literal">master</span></code></pre>
<ul>
<li>
<p>If conflicts are found, solve them locally.</p>
</li>
<li>
<p>Upload the code developed to the central repository</p>
</li>
</ul>
<pre><code class="hljs language-shell">git add -A
git commit -m <span class="hljs-string">"comentario explicativo de las modificaicones realizadas"</span>
git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> <span class="hljs-built_in">feature</span>/&#x3C;<span class="hljs-built_in">feature</span>-name></code></pre>
<ul>
<li>
<p>Perform from the management of the central repository (gitlab or github) a merge request or pull request to the master branch</p>
</li>
<li>
<p>Check the merge request for another partner and do the code merge.</p>
</li>
</ul>
]]></description><link>https://jgipsy.github.io/posts/git-for-dummies/</link><guid isPermaLink="true">https://jgipsy.github.io/posts/git-for-dummies/</guid><pubDate>Wed, 01 Mar 2017 00:00:00 GMT</pubDate></item></channel></rss>